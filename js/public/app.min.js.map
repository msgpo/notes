{"version":3,"sources":["app.js","filters/and.js","filters/categoryTitle.js","filters/groupNotes.js","filters/wordCount.js","controllers/appcontroller.js","controllers/notecontroller.js","controllers/notescontroller.js","controllers/notessettingscontroller.js","app.min.js","services/debounce.js","services/is.js","services/notesmodel.js","services/savequeue.js","services/urlFinder.js","directives/autofocus.js","directives/editor.js","directives/tooltip.js"],"names":["angular","$","requestToken","SimpleMDE","undefined","app","module","config","$provide","$routeProvider","RestangularProvider","$httpProvider","$windowProvider","defaults","headers","common","requesttoken","value","saveInterval","when","templateUrl","controller","resolve","note","$route","$q","is","Restangular","deferred","defer","noteId","current","params","loading","one","get","then","reject","promise","otherwise","redirectTo","baseUrl","OC","generateUrl","setBaseUrl","run","$rootScope","$location","NotesModel","attr","filePath","$on","notes","getAll","length","sorted","sort","a","b","modified","path","id","filter","$filter","items","searchString","searchValues","split","filtered","i","str","replace","_","memoize","category","prevCat","push","isCategory","title","substring","wordCount","search","window","n","$scope","init","lastViewedNote","errorMessage","useSearchAPI","defaultTitle","document","Notification","showTemporary","initSearch","OCA","Search","query","$apply","css","hasClass","click","$routeParams","SaveQueue","debounce","$document","$timeout","updateIfExists","isSaving","isManualSaving","updateTitle","content","trim","t","onEdit","unsaved","autoSave","add","manualSave","error","addManual","editCategory","showEditCategory","val","autocomplete","source","getCategories","minLength","position","my","at","of","open","width","innerWidth","addClass","insertAfter","focus","closeCategory","unbind","bind","event","ctrlKey","metaKey","String","fromCharCode","which","toLowerCase","preventDefault","toggleDistractionFree","launchIntoFullscreen","element","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","getElementById","$watch","newValue","$window","route","notesLoaded","folderSelectorOpen","filterCategory","orderRecent","orderAlpha","filterOrder","notesResource","all","getList","addAll","create","post","remove","$emit","toggleFavorite","customPUT","favorite","target","blur","categories","toggleFolderSelector","setFilter","animate","scrollTop","categoryFilter","startsWith","onbeforeunload","extensions","settings","isObject","on","msg","show","put","location","reload","factory","func","delay","timeout","context","this","args","arguments","cancel","apply","notesIds","prototype","type","updated","isDefined","splice","nthIndexOf","pattern","indexOf","maxLevel","details","cat","index","result","name","count","_queue","_flushLock","_manualSaveActive","_flush","keys","Object","self","requests","_noteUpdateRequest","_saveFailed","response","prev","next","text","directive","restrict","link","scope","urlFinder","simplemde","spellChecker","autoDownloadFontAwesome","toolbar","status","forceSync","editorElement","codemirror","getWrapperElement","url","tooltip","container","jQuery","oc_requesttoken"],"mappings":"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","file":"app.min.js","sourcesContent":["/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n/* jshint unused: false */\nvar app = angular.module('Notes', ['restangular', 'ngRoute']).\nconfig(function($provide, $routeProvider, RestangularProvider, $httpProvider,\n                $windowProvider) {\n    'use strict';\n\n    // Always send the CSRF token by default\n    $httpProvider.defaults.headers.common.requesttoken = requestToken;\n\n    // you have to use $provide inside the config method to provide a globally\n    // shared and injectable object\n    $provide.value('Constants', {\n        saveInterval: 5*1000  // miliseconds\n    });\n\n    // define your routes that that load templates into the ng-view\n    $routeProvider.when('/notes/:noteId', {\n        templateUrl: 'note.html',\n        controller: 'NoteController',\n        resolve: {\n            // $routeParams does not work inside resolve so use $route\n            // note is the name of the argument that will be injected into the\n            // controller\n            /* @ngInject */\n            note: function ($route, $q, is, Restangular) {\n\n                var deferred = $q.defer();\n                var noteId = $route.current.params.noteId;\n                is.loading = true;\n\n                Restangular.one('notes', noteId).get().then(function (note) {\n                    is.loading = false;\n                    deferred.resolve(note);\n                }, function () {\n                    is.loading = false;\n                    deferred.reject();\n                });\n\n                return deferred.promise;\n            }\n        }\n    }).otherwise({\n        redirectTo: '/'\n    });\n\n    var baseUrl = OC.generateUrl('/apps/notes');\n    RestangularProvider.setBaseUrl(baseUrl);\n\n\n\n}).run(function ($rootScope, $location, NotesModel) {\n    'use strict';\n\n    $('link[rel=\"shortcut icon\"]').attr(\n\t\t    'href',\n\t\t    OC.filePath('notes', 'img', 'favicon.png')\n    );\n\n    // handle route errors\n    $rootScope.$on('$routeChangeError', function () {\n        var notes = NotesModel.getAll();\n\n        // route change error should redirect to the latest note if possible\n        if (notes.length > 0) {\n            var sorted = notes.sort(function (a, b) {\n                if(a.modified > b.modified) {\n                    return 1;\n                } else if(a.modified < b.modified) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            });\n\n            var note = notes[sorted.length-1];\n            $location.path('/notes/' + note.id);\n        } else {\n            $location.path('/');\n        }\n    });\n});\n","/**\n * filter by multiple words (AND operation)\n */\napp.filter('and', ['$filter', function ($filter) {\n\t'use strict';\n\treturn function (items, searchString) {\n\t\tvar searchValues = searchString.split(' ');\n\t\tvar filtered = items;\n\t\tfor(var i in searchValues) {\n\t\t\tfiltered = $filter('filter')(filtered, searchValues[i]);\n\t\t}\n\t\treturn filtered;\n\t};\n}]);\n","app.filter('categoryTitle', function () {\n\t'use strict';\n\treturn function (str) {\n\t\tif (str && (typeof str === 'string')) {\n\t\t\treturn str.replace(/\\//g, ' / ');\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t};\n});\n","/**\n * group notes by (sub) category\n */\napp.filter('groupNotes', ['$filter', function () {\n\t'use strict';\n\treturn _.memoize(function (notes, category) {\n\t\tif(category) {\n\t\t\tvar items = [];\n\t\t\tvar prevCat = null;\n\t\t\tfor(var i=0; i<notes.length; i+=1) {\n\t\t\t\tvar note = notes[i];\n\t\t\t\tif(prevCat !== null && prevCat !== note.category) {\n\t\t\t\t\titems.push({\n\t\t\t\t\t\tisCategory: true,\n\t\t\t\t\t\ttitle: note.category.substring(category.length+1),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tprevCat = note.category;\n\t\t\t\titems.push(note);\n\t\t\t}\n\t\t\treturn items;\n\t\t} else {\n\t\t\treturn notes;\n\t\t}\n\t});\n}]);\n","app.filter('wordCount', function () {\n\t'use strict';\n\treturn function (value) {\n\t\tif (value && (typeof value === 'string')) {\n\t\t\tvar wordCount = value.split(/\\s+/).filter(\n\t\t\t\t// only count words containing\n\t\t\t\t// at least one alphanumeric character\n\t\t\t\tfunction(value) {\n\t\t\t\t\treturn value.search(/[A-Za-z0-9]/) !== -1;\n\t\t\t\t}\n\t\t\t).length;\n\t\t\treturn window.n('notes', '%n word', '%n words', wordCount);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t};\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('AppController', function ($scope, $location, is) {\n    'use strict';\n\n    $scope.is = is;\n\n    $scope.init = function (lastViewedNote, errorMessage, useSearchAPI) {\n        $scope.defaultTitle = document.title;\n\n        if(lastViewedNote !== 0 && $location.path()==='') {\n            $location.path('/notes/' + lastViewedNote);\n        }\n        if(errorMessage) {\n            OC.Notification.showTemporary(errorMessage);\n        }\n        if(useSearchAPI) {\n            $scope.initSearch();\n        }\n    };\n\n    $scope.search = '';\n    $scope.defaultTitle = null;\n\n    $scope.initSearch = function() {\n        new OCA.Search(\n            function (query) {\n                $scope.search = query;\n                $scope.$apply();\n                if($('#app-navigation-toggle').css('display')!=='none' &&\n                        !$('body').hasClass('snapjs-left')) {\n                    $('#app-navigation-toggle').click();\n                }\n            },\n            function () {\n                $scope.search = '';\n                $scope.$apply();\n            }\n        );\n    };\n\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('NoteController', function($routeParams, $scope, NotesModel,\n                                          SaveQueue, note, debounce,\n                                          $document, $timeout) {\n    'use strict';\n\n    NotesModel.updateIfExists(note);\n\n    $scope.note = NotesModel.get($routeParams.noteId);\n\n    $scope.isSaving = function () {\n        return SaveQueue.isSaving();\n    };\n    $scope.isManualSaving = function () {\n        return SaveQueue.isManualSaving();\n    };\n\n    $scope.updateTitle = function () {\n        var content = $scope.note.content;\n\n        // prepare content: remove markdown characters and empty spaces\n        content = content.replace(/^\\s*[*+-]\\s+/mg, ''); // list item\n        content = content.replace(/^#+\\s+(.*?)\\s*#*$/mg, '$1'); // headline\n        content = content.replace(/^(=+|-+)$/mg, ''); // separate headline\n        content = content.replace(/(\\*+|_+)(.*?)\\1/mg, '$2'); // emphasis\n\n        // prevent directory traversal, illegal characters\n        content = content.replace(/[\\*\\|\\/\\\\\\:\\\"<>\\?]/g, '');\n        // prevent unintended file names\n        content = content.replace(/^[\\. ]+/mg, '');\n\n        // generate title from the first line of the content\n        $scope.note.title = content.trim().split(/\\r?\\n/, 2)[0] ||\n            t('notes', 'New note');\n    };\n\n    $scope.onEdit = function() {\n        var note = $scope.note;\n        note.unsaved = true;\n        $scope.autoSave(note);\n    };\n\n    $scope.autoSave = debounce(function(note) {\n        SaveQueue.add(note);\n    }, 1000);\n\n    $scope.manualSave = function() {\n        var note = $scope.note;\n        note.error = false;\n        SaveQueue.addManual(note);\n    };\n\n    $scope.editCategory = false;\n    $scope.showEditCategory = function() {\n        $('#category').val($scope.note.category);\n        $scope.editCategory = true;\n        $('#category').autocomplete({\n            source: NotesModel.getCategories(NotesModel.getAll(), 0, false),\n            minLength: 0,\n            position: { my: 'left bottom', at: 'left top', of: '#category' },\n            open: function() {\n                 $timeout(function() {\n                     var width = $('form.category').innerWidth() - 2;\n                     $('.ui-autocomplete.ui-menu').width(width);\n                 });\n            },\n        }).autocomplete('widget').addClass('category-autocomplete');\n        // fix space between input and confirm-button\n        $('form.category .icon-confirm').insertAfter('#category');\n\n        $timeout(function() {\n            $('#category').focus();\n                $('#category').autocomplete('search', '');\n        });\n    };\n    $scope.closeCategory = function() {\n        $scope.editCategory = false;\n        var category = $('#category').val();\n        if($scope.note.category !== category) {\n            $scope.note.category = category;\n            $scope.note.unsaved = true;\n            $scope.autoSave($scope.note);\n        }\n    };\n\n    $document.unbind('keypress.notes.save');\n    $document.bind('keypress.notes.save', function(event) {\n        if(event.ctrlKey || event.metaKey) {\n            switch(String.fromCharCode(event.which).toLowerCase()) {\n                case 's':\n                    event.preventDefault();\n                    $scope.manualSave();\n                    break;\n            }\n        }\n    });\n\n    $scope.toggleDistractionFree = function() {\n        function launchIntoFullscreen(element) {\n            if(element.requestFullscreen) {\n                element.requestFullscreen();\n            } else if(element.mozRequestFullScreen) {\n                element.mozRequestFullScreen();\n            } else if(element.webkitRequestFullscreen) {\n                element.webkitRequestFullscreen();\n            } else if(element.msRequestFullscreen) {\n                element.msRequestFullscreen();\n            }\n        }\n\n        function exitFullscreen() {\n            if(document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if(document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if(document.webkitExitFullscreen) {\n                document.webkitExitFullscreen();\n            }\n        }\n\n        if(document.fullscreenElement ||\n           document.mozFullScreenElement ||\n           document.webkitFullscreenElement) {\n            exitFullscreen();\n        } else {\n            launchIntoFullscreen(document.getElementById('app-content'));\n        }\n    };\n\n    $scope.$watch(function() {\n        return $scope.note.title;\n    }, function(newValue) {\n        if(newValue) {\n            document.title = newValue + ' - ' + $scope.defaultTitle;\n        } else {\n            document.title = $scope.defaultTitle;\n        }\n    });\n\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// This is available by using ng-controller=\"NotesController\" in your HTML\napp.controller('NotesController', function($routeParams, $scope, $location,\n                                           Restangular, NotesModel, $window) {\n    'use strict';\n\n    $scope.route = $routeParams;\n    $scope.notesLoaded = false;\n    $scope.notes = NotesModel.getAll();\n\n    $scope.folderSelectorOpen = false;\n    $scope.filterCategory = null;\n\n    $scope.orderRecent = ['-favorite','-modified'];\n    $scope.orderAlpha = ['category','-favorite','title'];\n    $scope.filterOrder = $scope.orderRecent;\n\n    var notesResource = Restangular.all('notes');\n\n    // initial request for getting all notes\n    notesResource.getList().then(function (notes) {\n        NotesModel.addAll(notes);\n        $scope.notesLoaded = true;\n    });\n\n    $scope.create = function () {\n        notesResource.post({category: $scope.filterCategory})\n                     .then(function (note) {\n            NotesModel.add(note);\n            $location.path('/notes/' + note.id);\n        });\n    };\n\n    $scope.delete = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.remove().then(function () {\n            NotesModel.remove(noteId);\n            $scope.$emit('$routeChangeError');\n        });\n    };\n\n    $scope.toggleFavorite = function (noteId, event) {\n        var note = NotesModel.get(noteId);\n        note.customPUT({favorite: !note.favorite},\n            'favorite', {}, {}).then(function (favorite) {\n            note.favorite = favorite ? true : false;\n        });\n        event.target.blur();\n    };\n\n    $scope.categories = [];\n    $scope.$watch('notes', function(notes) {\n        $scope.categories = NotesModel.getCategories(notes, 1, true);\n    }, true);\n\n    $scope.toggleFolderSelector = function () {\n        $scope.folderSelectorOpen = !$scope.folderSelectorOpen;\n    };\n\n    $scope.setFilter = function (category) {\n        if(category===null) {\n            $scope.filterOrder = $scope.orderRecent;\n        } else {\n            $scope.filterOrder = $scope.orderAlpha;\n        }\n        $scope.filterCategory = category;\n        $scope.folderSelectorOpen = false;\n        $('#app-navigation > ul').animate({scrollTop: 0}, 'fast');\n    };\n\n    $scope.categoryFilter = function (note) {\n        if($scope.filterCategory!==null) {\n            if(note.category===$scope.filterCategory) {\n                return true;\n            } else if(note.category!==null) {\n                return note.category.startsWith($scope.filterCategory+'/');\n            }\n        }\n        return true;\n    };\n\n    $window.onbeforeunload = function() {\n        var notes = NotesModel.getAll();\n        for(var i=0; i<notes.length; i+=1) {\n            if(notes[i].unsaved) {\n                return t('notes', 'There are unsaved notes. Leaving ' +\n                                  'the page will discard all changes!');\n            }\n        }\n        return null;\n    };\n});\n","app.controller('NotesSettingsController',\n               function($scope, Restangular, $document) {\n    'use strict';\n\n    $scope.extensions = ['.txt', '.md'];\n\n    Restangular.one('settings').get().then(function(settings) {\n        if(angular.isObject(settings)) {\n            $scope.settings = settings;\n        } else {\n            $scope.settings = Restangular.one('settings');\n        }\n    });\n\n    $document.on('change', '#notesPath', function() {\n        var msg = t('notes', 'Please wait while new settings are applied…');\n        OC.Notification.show(msg);\n        $scope.settings.put().then(function() {\n            window.location.reload(true);\n        });\n    });\n\n    $document.on('change', '#fileSuffix', function() {\n        $scope.settings.put();\n    });\n});\n","(function(angular, $, requestToken, SimpleMDE, undefined){'use strict';/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n/* jshint unused: false */\nvar app = angular.module('Notes', ['restangular', 'ngRoute']).\nconfig([\"$provide\", \"$routeProvider\", \"RestangularProvider\", \"$httpProvider\", \"$windowProvider\", function($provide, $routeProvider, RestangularProvider, $httpProvider,\n                $windowProvider) {\n    'use strict';\n\n    // Always send the CSRF token by default\n    $httpProvider.defaults.headers.common.requesttoken = requestToken;\n\n    // you have to use $provide inside the config method to provide a globally\n    // shared and injectable object\n    $provide.value('Constants', {\n        saveInterval: 5*1000  // miliseconds\n    });\n\n    // define your routes that that load templates into the ng-view\n    $routeProvider.when('/notes/:noteId', {\n        templateUrl: 'note.html',\n        controller: 'NoteController',\n        resolve: {\n            // $routeParams does not work inside resolve so use $route\n            // note is the name of the argument that will be injected into the\n            // controller\n            /* @ngInject */\n            note: [\"$route\", \"$q\", \"is\", \"Restangular\", function ($route, $q, is, Restangular) {\n\n                var deferred = $q.defer();\n                var noteId = $route.current.params.noteId;\n                is.loading = true;\n\n                Restangular.one('notes', noteId).get().then(function (note) {\n                    is.loading = false;\n                    deferred.resolve(note);\n                }, function () {\n                    is.loading = false;\n                    deferred.reject();\n                });\n\n                return deferred.promise;\n            }]\n        }\n    }).otherwise({\n        redirectTo: '/'\n    });\n\n    var baseUrl = OC.generateUrl('/apps/notes');\n    RestangularProvider.setBaseUrl(baseUrl);\n\n\n\n}]).run([\"$rootScope\", \"$location\", \"NotesModel\", function ($rootScope, $location, NotesModel) {\n    'use strict';\n\n    $('link[rel=\"shortcut icon\"]').attr(\n\t\t    'href',\n\t\t    OC.filePath('notes', 'img', 'favicon.png')\n    );\n\n    // handle route errors\n    $rootScope.$on('$routeChangeError', function () {\n        var notes = NotesModel.getAll();\n\n        // route change error should redirect to the latest note if possible\n        if (notes.length > 0) {\n            var sorted = notes.sort(function (a, b) {\n                if(a.modified > b.modified) {\n                    return 1;\n                } else if(a.modified < b.modified) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            });\n\n            var note = notes[sorted.length-1];\n            $location.path('/notes/' + note.id);\n        } else {\n            $location.path('/');\n        }\n    });\n}]);\n\n/**\n * filter by multiple words (AND operation)\n */\napp.filter('and', ['$filter', function ($filter) {\n\t'use strict';\n\treturn function (items, searchString) {\n\t\tvar searchValues = searchString.split(' ');\n\t\tvar filtered = items;\n\t\tfor(var i in searchValues) {\n\t\t\tfiltered = $filter('filter')(filtered, searchValues[i]);\n\t\t}\n\t\treturn filtered;\n\t};\n}]);\n\napp.filter('categoryTitle', function () {\n\t'use strict';\n\treturn function (str) {\n\t\tif (str && (typeof str === 'string')) {\n\t\t\treturn str.replace(/\\//g, ' / ');\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t};\n});\n\n/**\n * group notes by (sub) category\n */\napp.filter('groupNotes', ['$filter', function () {\n\t'use strict';\n\treturn _.memoize(function (notes, category) {\n\t\tif(category) {\n\t\t\tvar items = [];\n\t\t\tvar prevCat = null;\n\t\t\tfor(var i=0; i<notes.length; i+=1) {\n\t\t\t\tvar note = notes[i];\n\t\t\t\tif(prevCat !== null && prevCat !== note.category) {\n\t\t\t\t\titems.push({\n\t\t\t\t\t\tisCategory: true,\n\t\t\t\t\t\ttitle: note.category.substring(category.length+1),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tprevCat = note.category;\n\t\t\t\titems.push(note);\n\t\t\t}\n\t\t\treturn items;\n\t\t} else {\n\t\t\treturn notes;\n\t\t}\n\t});\n}]);\n\napp.filter('wordCount', function () {\n\t'use strict';\n\treturn function (value) {\n\t\tif (value && (typeof value === 'string')) {\n\t\t\tvar wordCount = value.split(/\\s+/).filter(\n\t\t\t\t// only count words containing\n\t\t\t\t// at least one alphanumeric character\n\t\t\t\tfunction(value) {\n\t\t\t\t\treturn value.search(/[A-Za-z0-9]/) !== -1;\n\t\t\t\t}\n\t\t\t).length;\n\t\t\treturn window.n('notes', '%n word', '%n words', wordCount);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t};\n});\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('AppController', [\"$scope\", \"$location\", \"is\", function ($scope, $location, is) {\n    'use strict';\n\n    $scope.is = is;\n\n    $scope.init = function (lastViewedNote, errorMessage, useSearchAPI) {\n        $scope.defaultTitle = document.title;\n\n        if(lastViewedNote !== 0 && $location.path()==='') {\n            $location.path('/notes/' + lastViewedNote);\n        }\n        if(errorMessage) {\n            OC.Notification.showTemporary(errorMessage);\n        }\n        if(useSearchAPI) {\n            $scope.initSearch();\n        }\n    };\n\n    $scope.search = '';\n    $scope.defaultTitle = null;\n\n    $scope.initSearch = function() {\n        new OCA.Search(\n            function (query) {\n                $scope.search = query;\n                $scope.$apply();\n                if($('#app-navigation-toggle').css('display')!=='none' &&\n                        !$('body').hasClass('snapjs-left')) {\n                    $('#app-navigation-toggle').click();\n                }\n            },\n            function () {\n                $scope.search = '';\n                $scope.$apply();\n            }\n        );\n    };\n\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('NoteController', [\"$routeParams\", \"$scope\", \"NotesModel\", \"SaveQueue\", \"note\", \"debounce\", \"$document\", \"$timeout\", function($routeParams, $scope, NotesModel,\n                                          SaveQueue, note, debounce,\n                                          $document, $timeout) {\n    'use strict';\n\n    NotesModel.updateIfExists(note);\n\n    $scope.note = NotesModel.get($routeParams.noteId);\n\n    $scope.isSaving = function () {\n        return SaveQueue.isSaving();\n    };\n    $scope.isManualSaving = function () {\n        return SaveQueue.isManualSaving();\n    };\n\n    $scope.updateTitle = function () {\n        var content = $scope.note.content;\n\n        // prepare content: remove markdown characters and empty spaces\n        content = content.replace(/^\\s*[*+-]\\s+/mg, ''); // list item\n        content = content.replace(/^#+\\s+(.*?)\\s*#*$/mg, '$1'); // headline\n        content = content.replace(/^(=+|-+)$/mg, ''); // separate headline\n        content = content.replace(/(\\*+|_+)(.*?)\\1/mg, '$2'); // emphasis\n\n        // prevent directory traversal, illegal characters\n        content = content.replace(/[\\*\\|\\/\\\\\\:\\\"<>\\?]/g, '');\n        // prevent unintended file names\n        content = content.replace(/^[\\. ]+/mg, '');\n\n        // generate title from the first line of the content\n        $scope.note.title = content.trim().split(/\\r?\\n/, 2)[0] ||\n            t('notes', 'New note');\n    };\n\n    $scope.onEdit = function() {\n        var note = $scope.note;\n        note.unsaved = true;\n        $scope.autoSave(note);\n    };\n\n    $scope.autoSave = debounce(function(note) {\n        SaveQueue.add(note);\n    }, 1000);\n\n    $scope.manualSave = function() {\n        var note = $scope.note;\n        note.error = false;\n        SaveQueue.addManual(note);\n    };\n\n    $scope.editCategory = false;\n    $scope.showEditCategory = function() {\n        $('#category').val($scope.note.category);\n        $scope.editCategory = true;\n        $('#category').autocomplete({\n            source: NotesModel.getCategories(NotesModel.getAll(), 0, false),\n            minLength: 0,\n            position: { my: 'left bottom', at: 'left top', of: '#category' },\n            open: function() {\n                 $timeout(function() {\n                     var width = $('form.category').innerWidth() - 2;\n                     $('.ui-autocomplete.ui-menu').width(width);\n                 });\n            },\n        }).autocomplete('widget').addClass('category-autocomplete');\n        // fix space between input and confirm-button\n        $('form.category .icon-confirm').insertAfter('#category');\n\n        $timeout(function() {\n            $('#category').focus();\n                $('#category').autocomplete('search', '');\n        });\n    };\n    $scope.closeCategory = function() {\n        $scope.editCategory = false;\n        var category = $('#category').val();\n        if($scope.note.category !== category) {\n            $scope.note.category = category;\n            $scope.note.unsaved = true;\n            $scope.autoSave($scope.note);\n        }\n    };\n\n    $document.unbind('keypress.notes.save');\n    $document.bind('keypress.notes.save', function(event) {\n        if(event.ctrlKey || event.metaKey) {\n            switch(String.fromCharCode(event.which).toLowerCase()) {\n                case 's':\n                    event.preventDefault();\n                    $scope.manualSave();\n                    break;\n            }\n        }\n    });\n\n    $scope.toggleDistractionFree = function() {\n        function launchIntoFullscreen(element) {\n            if(element.requestFullscreen) {\n                element.requestFullscreen();\n            } else if(element.mozRequestFullScreen) {\n                element.mozRequestFullScreen();\n            } else if(element.webkitRequestFullscreen) {\n                element.webkitRequestFullscreen();\n            } else if(element.msRequestFullscreen) {\n                element.msRequestFullscreen();\n            }\n        }\n\n        function exitFullscreen() {\n            if(document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if(document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if(document.webkitExitFullscreen) {\n                document.webkitExitFullscreen();\n            }\n        }\n\n        if(document.fullscreenElement ||\n           document.mozFullScreenElement ||\n           document.webkitFullscreenElement) {\n            exitFullscreen();\n        } else {\n            launchIntoFullscreen(document.getElementById('app-content'));\n        }\n    };\n\n    $scope.$watch(function() {\n        return $scope.note.title;\n    }, function(newValue) {\n        if(newValue) {\n            document.title = newValue + ' - ' + $scope.defaultTitle;\n        } else {\n            document.title = $scope.defaultTitle;\n        }\n    });\n\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// This is available by using ng-controller=\"NotesController\" in your HTML\napp.controller('NotesController', [\"$routeParams\", \"$scope\", \"$location\", \"Restangular\", \"NotesModel\", \"$window\", function($routeParams, $scope, $location,\n                                           Restangular, NotesModel, $window) {\n    'use strict';\n\n    $scope.route = $routeParams;\n    $scope.notesLoaded = false;\n    $scope.notes = NotesModel.getAll();\n\n    $scope.folderSelectorOpen = false;\n    $scope.filterCategory = null;\n\n    $scope.orderRecent = ['-favorite','-modified'];\n    $scope.orderAlpha = ['category','-favorite','title'];\n    $scope.filterOrder = $scope.orderRecent;\n\n    var notesResource = Restangular.all('notes');\n\n    // initial request for getting all notes\n    notesResource.getList().then(function (notes) {\n        NotesModel.addAll(notes);\n        $scope.notesLoaded = true;\n    });\n\n    $scope.create = function () {\n        notesResource.post({category: $scope.filterCategory})\n                     .then(function (note) {\n            NotesModel.add(note);\n            $location.path('/notes/' + note.id);\n        });\n    };\n\n    $scope.delete = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.remove().then(function () {\n            NotesModel.remove(noteId);\n            $scope.$emit('$routeChangeError');\n        });\n    };\n\n    $scope.toggleFavorite = function (noteId, event) {\n        var note = NotesModel.get(noteId);\n        note.customPUT({favorite: !note.favorite},\n            'favorite', {}, {}).then(function (favorite) {\n            note.favorite = favorite ? true : false;\n        });\n        event.target.blur();\n    };\n\n    $scope.categories = [];\n    $scope.$watch('notes', function(notes) {\n        $scope.categories = NotesModel.getCategories(notes, 1, true);\n    }, true);\n\n    $scope.toggleFolderSelector = function () {\n        $scope.folderSelectorOpen = !$scope.folderSelectorOpen;\n    };\n\n    $scope.setFilter = function (category) {\n        if(category===null) {\n            $scope.filterOrder = $scope.orderRecent;\n        } else {\n            $scope.filterOrder = $scope.orderAlpha;\n        }\n        $scope.filterCategory = category;\n        $scope.folderSelectorOpen = false;\n        $('#app-navigation > ul').animate({scrollTop: 0}, 'fast');\n    };\n\n    $scope.categoryFilter = function (note) {\n        if($scope.filterCategory!==null) {\n            if(note.category===$scope.filterCategory) {\n                return true;\n            } else if(note.category!==null) {\n                return note.category.startsWith($scope.filterCategory+'/');\n            }\n        }\n        return true;\n    };\n\n    $window.onbeforeunload = function() {\n        var notes = NotesModel.getAll();\n        for(var i=0; i<notes.length; i+=1) {\n            if(notes[i].unsaved) {\n                return t('notes', 'There are unsaved notes. Leaving ' +\n                                  'the page will discard all changes!');\n            }\n        }\n        return null;\n    };\n}]);\n\napp.controller('NotesSettingsController',\n               [\"$scope\", \"Restangular\", \"$document\", function($scope, Restangular, $document) {\n    'use strict';\n\n    $scope.extensions = ['.txt', '.md'];\n\n    Restangular.one('settings').get().then(function(settings) {\n        if(angular.isObject(settings)) {\n            $scope.settings = settings;\n        } else {\n            $scope.settings = Restangular.one('settings');\n        }\n    });\n\n    $document.on('change', '#notesPath', function() {\n        var msg = t('notes', 'Please wait while new settings are applied…');\n        OC.Notification.show(msg);\n        $scope.settings.put().then(function() {\n            window.location.reload(true);\n        });\n    });\n\n    $document.on('change', '#fileSuffix', function() {\n        $scope.settings.put();\n    });\n}]);\n\n/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('debounce', ['$timeout', function($timeout) {\n\t'use strict';\n\n\treturn function debounce(func, delay) {\n\t\tvar timeout;\n\n\t\treturn function() {\n\t\t\tvar context = this, args = arguments;\n\n\t\t\tif(timeout) {\n\t\t\t\t$timeout.cancel(timeout);\n\t\t\t}\n\t\t\ttimeout = $timeout(function() {\n\t\t\t\tfunc.apply(context, args);\n\t\t\t}, delay);\n\t\t};\n\t};\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('is', function () {\n    'use strict';\n\n    return {\n        loading: false\n    };\n});\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// take care of fileconflicts by appending a number\napp.factory('NotesModel', function () {\n    'use strict';\n\n    var NotesModel = function () {\n        this.notes = [];\n        this.notesIds = {};\n    };\n\n    NotesModel.prototype = {\n        addAll: function (notes) {\n            for(var i=0; i<notes.length; i+=1) {\n                this.add(notes[i]);\n            }\n        },\n        add: function(note) {\n            this.updateIfExists(note);\n        },\n        getAll: function () {\n            return this.notes;\n        },\n        get: function (id) {\n            if(this.notesIds[id].error) {\n                OC.Notification.show(\n                    this.notesIds[id].errorMessage,\n                    { type: 'error' }\n                );\n                return false;\n            }\n            return this.notesIds[id];\n        },\n        updateIfExists: function(updated) {\n            var note = this.notesIds[updated.id];\n            if(angular.isDefined(note)) {\n                // don't update meta-data over full data\n                if(updated.content !== null || note.content === null) {\n                    note.title = updated.title;\n                    note.modified = updated.modified;\n                    note.content = updated.content;\n                    note.favorite = updated.favorite;\n                    note.category = updated.category;\n                    note.error = updated.error;\n                    note.errorMessage = updated.errorMessage;\n                }\n            } else {\n                this.notes.push(updated);\n                this.notesIds[updated.id] = updated;\n            }\n        },\n        remove: function (id) {\n            for(var i=0; i<this.notes.length; i+=1) {\n                var note = this.notes[i];\n                if(note.id === id) {\n                    this.notes.splice(i, 1);\n                    delete this.notesIds[id];\n                    break;\n                }\n            }\n        },\n\n        nthIndexOf: function(str, pattern, n) {\n            var i = -1;\n            while (n-- && i++ < str.length) {\n                i = str.indexOf(pattern, i);\n                if (i < 0) {\n                    break;\n                }\n             }\n             return i;\n         },\n\n         getCategories: function (notes, maxLevel, details) {\n             var categories = {};\n             for(var i=0; i<notes.length; i+=1) {\n                 var cat = notes[i].category;\n                 if(maxLevel>0) {\n                     var index = this.nthIndexOf(cat, '/', maxLevel);\n                     if(index>0) {\n                         cat = cat.substring(0, index);\n                     }\n                 }\n                 if(categories[cat]===undefined) {\n                     categories[cat] = 1;\n                 } else {\n                     categories[cat] += 1;\n                 }\n             }\n             var result = [];\n             for(var category in categories) {\n                 if(details) {\n                     result.push({\n                         name: category,\n                         count: categories[category],\n                     });\n                 } else if(category) {\n                     result.push(category);\n                 }\n             }\n             if(!details) {\n                 result.sort();\n             }\n             return result;\n         },\n\n    };\n\n    return new NotesModel();\n});\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('SaveQueue', [\"$q\", function($q) {\n    'use strict';\n\n    var SaveQueue = function () {\n        this._queue = {};\n        this._flushLock = false;\n        this._manualSaveActive = false;\n    };\n\n    SaveQueue.prototype = {\n        add: function (note) {\n            this._queue[note.id] = note;\n            this._flush();\n        },\n        addManual: function (note) {\n            this._manualSaveActive = true;\n            this.add(note);\n        },\n        _flush: function () {\n            // if there are no changes dont execute the requests\n            var keys = Object.keys(this._queue);\n            if(keys.length === 0 || this._flushLock) {\n                return;\n            } else {\n                this._flushLock = true;\n            }\n\n            var self = this;\n            var requests = [];\n\n            // iterate over updated objects and run an update request for\n            // each one of them\n            for(var i=0; i<keys.length; i+=1) {\n                var note = this._queue[keys[i]];\n                // if the update finished, update the modified and title\n                // attributes on the note\n                requests.push(note.put().then(\n                    this._noteUpdateRequest.bind(null, note))\n                    .catch(this._saveFailed.bind(null, note))\n                );\n            }\n            this._queue = {};\n\n            // if all update requests are completed, run the flush\n            // again to update the next batch of queued notes\n            $q.all(requests).then(function () {\n                self._flushLock = false;\n                self._flush();\n                self._manualSaveActive = false;\n            });\n        },\n        _noteUpdateRequest: function (note, response) {\n            note.error = false;\n            note.title = response.title;\n            note.modified = response.modified;\n            if(note.category !== response.category) {\n                OC.Notification.showTemporary(\n                    t('notes', 'Updating the note\\'s category has failed. ' +\n                               'Is the target directory writable?')\n                );\n                note.category = response.category;\n            }\n            if(response.content === note.content) {\n                note.unsaved = false;\n            }\n        },\n        _saveFailed: function (note) {\n            note.error = true;\n        },\n        isSaving: function () {\n            return this._flushLock;\n        },\n        isManualSaving: function () {\n            return this._manualSaveActive;\n        },\n    };\n\n    return new SaveQueue();\n}]);\n\n/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// finds the url which should be opened when a link is clicked\n// example: '[hello](http://example.com)'\napp.factory('urlFinder', [function() {\n\t'use strict';\n\n\treturn function urlFinder(element) {\n\t\telement = $(element);\n\n\t\t// special case: click on ')'\n\t\tif(element.is('.cm-url.cm-formatting')) {\n\t\t\tif(element.prev().length !== 0) {\n\t\t\t\telement = element.prev();\n\t\t\t}\n\t\t}\n\n\t\t// skip '[hello]'\n\t\twhile(element.is('.cm-link')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// skip '('\n\t\twhile(element.is('.cm-url.cm-formatting')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// check if we actually have a cm-url\n\t\tif(element.is('.cm-url:not(.cm-formatting)')) {\n\t\t\treturn element.text();\n\t\t}\n\n\t\treturn undefined;\n\t};\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesAutofocus', function () {\n    'use strict';\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.focus();\n        }\n    };\n});\n\n/*global SimpleMDE*/\napp.directive('editor', ['$timeout',\n                         'urlFinder',\n                         function ($timeout, urlFinder) {\n\t'use strict';\n\treturn {\n\t\trestrict: 'A',\n\t\tlink: function(scope, element) {\n\n\t\t\tvar simplemde = new SimpleMDE({\n\t\t\t\telement: element[0],\n\t\t\t\tspellChecker: false,\n\t\t\t\tautoDownloadFontAwesome: false,\n\t\t\t\ttoolbar: false,\n\t\t\t\tstatus: false,\n\t\t\t\tforceSync: true\n\t\t\t});\n\t\t\tvar editorElement = $(simplemde.codemirror.getWrapperElement());\n\n\t\t\tsimplemde.value(scope.note.content);\n\t\t\tsimplemde.codemirror.focus();\n\n\t\t\tsimplemde.codemirror.on('change', function() {\n\t\t\t\t$timeout(function() {\n\t\t\t\t\tscope.$apply(function () {\n\t\t\t\t\t\tscope.note.content = simplemde.value();\n\t\t\t\t\t\tscope.onEdit();\n\t\t\t\t\t\tscope.updateTitle();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\teditorElement.on('click', '.cm-link, .cm-url', function(event) {\n\t\t\t\tif(event.ctrlKey) {\n\t\t\t\t\tvar url = urlFinder(this);\n\t\t\t\t\tif(angular.isDefined(url)) {\n\t\t\t\t\t\twindow.open(url, '_blank');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesTooltip', function () {\n    'use strict';\n\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.tooltip({'container': 'body'});\n\n            element.on('$destroy', function() {\n                element.tooltip('hide');\n            });\n\n            element.on('click', function() {\n                element.tooltip('hide');\n            });\n        }\n    };\n});\n})(angular, jQuery, oc_requesttoken, SimpleMDE);","/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('debounce', ['$timeout', function($timeout) {\n\t'use strict';\n\n\treturn function debounce(func, delay) {\n\t\tvar timeout;\n\n\t\treturn function() {\n\t\t\tvar context = this, args = arguments;\n\n\t\t\tif(timeout) {\n\t\t\t\t$timeout.cancel(timeout);\n\t\t\t}\n\t\t\ttimeout = $timeout(function() {\n\t\t\t\tfunc.apply(context, args);\n\t\t\t}, delay);\n\t\t};\n\t};\n}]);\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('is', function () {\n    'use strict';\n\n    return {\n        loading: false\n    };\n});","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// take care of fileconflicts by appending a number\napp.factory('NotesModel', function () {\n    'use strict';\n\n    var NotesModel = function () {\n        this.notes = [];\n        this.notesIds = {};\n    };\n\n    NotesModel.prototype = {\n        addAll: function (notes) {\n            for(var i=0; i<notes.length; i+=1) {\n                this.add(notes[i]);\n            }\n        },\n        add: function(note) {\n            this.updateIfExists(note);\n        },\n        getAll: function () {\n            return this.notes;\n        },\n        get: function (id) {\n            if(this.notesIds[id].error) {\n                OC.Notification.show(\n                    this.notesIds[id].errorMessage,\n                    { type: 'error' }\n                );\n                return false;\n            }\n            return this.notesIds[id];\n        },\n        updateIfExists: function(updated) {\n            var note = this.notesIds[updated.id];\n            if(angular.isDefined(note)) {\n                // don't update meta-data over full data\n                if(updated.content !== null || note.content === null) {\n                    note.title = updated.title;\n                    note.modified = updated.modified;\n                    note.content = updated.content;\n                    note.favorite = updated.favorite;\n                    note.category = updated.category;\n                    note.error = updated.error;\n                    note.errorMessage = updated.errorMessage;\n                }\n            } else {\n                this.notes.push(updated);\n                this.notesIds[updated.id] = updated;\n            }\n        },\n        remove: function (id) {\n            for(var i=0; i<this.notes.length; i+=1) {\n                var note = this.notes[i];\n                if(note.id === id) {\n                    this.notes.splice(i, 1);\n                    delete this.notesIds[id];\n                    break;\n                }\n            }\n        },\n\n        nthIndexOf: function(str, pattern, n) {\n            var i = -1;\n            while (n-- && i++ < str.length) {\n                i = str.indexOf(pattern, i);\n                if (i < 0) {\n                    break;\n                }\n             }\n             return i;\n         },\n\n         getCategories: function (notes, maxLevel, details) {\n             var categories = {};\n             for(var i=0; i<notes.length; i+=1) {\n                 var cat = notes[i].category;\n                 if(maxLevel>0) {\n                     var index = this.nthIndexOf(cat, '/', maxLevel);\n                     if(index>0) {\n                         cat = cat.substring(0, index);\n                     }\n                 }\n                 if(categories[cat]===undefined) {\n                     categories[cat] = 1;\n                 } else {\n                     categories[cat] += 1;\n                 }\n             }\n             var result = [];\n             for(var category in categories) {\n                 if(details) {\n                     result.push({\n                         name: category,\n                         count: categories[category],\n                     });\n                 } else if(category) {\n                     result.push(category);\n                 }\n             }\n             if(!details) {\n                 result.sort();\n             }\n             return result;\n         },\n\n    };\n\n    return new NotesModel();\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('SaveQueue', function($q) {\n    'use strict';\n\n    var SaveQueue = function () {\n        this._queue = {};\n        this._flushLock = false;\n        this._manualSaveActive = false;\n    };\n\n    SaveQueue.prototype = {\n        add: function (note) {\n            this._queue[note.id] = note;\n            this._flush();\n        },\n        addManual: function (note) {\n            this._manualSaveActive = true;\n            this.add(note);\n        },\n        _flush: function () {\n            // if there are no changes dont execute the requests\n            var keys = Object.keys(this._queue);\n            if(keys.length === 0 || this._flushLock) {\n                return;\n            } else {\n                this._flushLock = true;\n            }\n\n            var self = this;\n            var requests = [];\n\n            // iterate over updated objects and run an update request for\n            // each one of them\n            for(var i=0; i<keys.length; i+=1) {\n                var note = this._queue[keys[i]];\n                // if the update finished, update the modified and title\n                // attributes on the note\n                requests.push(note.put().then(\n                    this._noteUpdateRequest.bind(null, note))\n                    .catch(this._saveFailed.bind(null, note))\n                );\n            }\n            this._queue = {};\n\n            // if all update requests are completed, run the flush\n            // again to update the next batch of queued notes\n            $q.all(requests).then(function () {\n                self._flushLock = false;\n                self._flush();\n                self._manualSaveActive = false;\n            });\n        },\n        _noteUpdateRequest: function (note, response) {\n            note.error = false;\n            note.title = response.title;\n            note.modified = response.modified;\n            if(note.category !== response.category) {\n                OC.Notification.showTemporary(\n                    t('notes', 'Updating the note\\'s category has failed. ' +\n                               'Is the target directory writable?')\n                );\n                note.category = response.category;\n            }\n            if(response.content === note.content) {\n                note.unsaved = false;\n            }\n        },\n        _saveFailed: function (note) {\n            note.error = true;\n        },\n        isSaving: function () {\n            return this._flushLock;\n        },\n        isManualSaving: function () {\n            return this._manualSaveActive;\n        },\n    };\n\n    return new SaveQueue();\n});\n","/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// finds the url which should be opened when a link is clicked\n// example: '[hello](http://example.com)'\napp.factory('urlFinder', [function() {\n\t'use strict';\n\n\treturn function urlFinder(element) {\n\t\telement = $(element);\n\n\t\t// special case: click on ')'\n\t\tif(element.is('.cm-url.cm-formatting')) {\n\t\t\tif(element.prev().length !== 0) {\n\t\t\t\telement = element.prev();\n\t\t\t}\n\t\t}\n\n\t\t// skip '[hello]'\n\t\twhile(element.is('.cm-link')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// skip '('\n\t\twhile(element.is('.cm-url.cm-formatting')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// check if we actually have a cm-url\n\t\tif(element.is('.cm-url:not(.cm-formatting)')) {\n\t\t\treturn element.text();\n\t\t}\n\n\t\treturn undefined;\n\t};\n}]);\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesAutofocus', function () {\n    'use strict';\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.focus();\n        }\n    };\n});\n","/*global SimpleMDE*/\napp.directive('editor', ['$timeout',\n                         'urlFinder',\n                         function ($timeout, urlFinder) {\n\t'use strict';\n\treturn {\n\t\trestrict: 'A',\n\t\tlink: function(scope, element) {\n\n\t\t\tvar simplemde = new SimpleMDE({\n\t\t\t\telement: element[0],\n\t\t\t\tspellChecker: false,\n\t\t\t\tautoDownloadFontAwesome: false,\n\t\t\t\ttoolbar: false,\n\t\t\t\tstatus: false,\n\t\t\t\tforceSync: true\n\t\t\t});\n\t\t\tvar editorElement = $(simplemde.codemirror.getWrapperElement());\n\n\t\t\tsimplemde.value(scope.note.content);\n\t\t\tsimplemde.codemirror.focus();\n\n\t\t\tsimplemde.codemirror.on('change', function() {\n\t\t\t\t$timeout(function() {\n\t\t\t\t\tscope.$apply(function () {\n\t\t\t\t\t\tscope.note.content = simplemde.value();\n\t\t\t\t\t\tscope.onEdit();\n\t\t\t\t\t\tscope.updateTitle();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\teditorElement.on('click', '.cm-link, .cm-url', function(event) {\n\t\t\t\tif(event.ctrlKey) {\n\t\t\t\t\tvar url = urlFinder(this);\n\t\t\t\t\tif(angular.isDefined(url)) {\n\t\t\t\t\t\twindow.open(url, '_blank');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n}]);\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesTooltip', function () {\n    'use strict';\n\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.tooltip({'container': 'body'});\n\n            element.on('$destroy', function() {\n                element.tooltip('hide');\n            });\n\n            element.on('click', function() {\n                element.tooltip('hide');\n            });\n        }\n    };\n});\n"]}